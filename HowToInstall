https://linux-man.fr/index.php/2020/12/28/docker-compose-ocs-glpi-mysql/


Skip to content
Linux-Man-Logo-Transparent-1.png	

    Linux
    Python
    Devops
    Services
    Nous contacter

Rechercher
D√©ployer GLPI et OCS en HTTPS avec Docker-compose en 2 minutes
docker-compose docker ocs glpi mysql
Introduction

Aujourd‚Äôhui, je veux te parler d‚Äôun projet que j‚Äôai cr√©√© r√©cemment avec Docker-compose.

Si tu es comme moi et que tu g√®res plusieurs serveurs et applications, tu sais √† quel point √ßa peut √™tre fastidieux de tout installer et configurer manuellement.

C‚Äôest pourquoi j‚Äôai cr√©√© ce projet pour te faciliter la vie en d√©ployant automatiquement GLPI et OCS avec HTTPS.

GLPI et OCS, ce sont deux logiciels open-source tr√®s utiles pour g√©rer les actifs informatiques et les inventaires de ton r√©seau. Avec ce projet tu peux les installer en un rien de temps et b√©n√©ficier du chiffrement HTTPS pour une s√©curit√© accrue. Et l‚Äôavantage c‚Äôest que tout est automatis√© gr√¢ce √† un script que j‚Äôai √©crit pour toi !

Dans cet article, je vais te montrer comment j‚Äôai mis √† jour ce projet en y ajoutant le support HTTPS pour GLPI et OCS.

Si tu veux juste le script c‚Äôest dispo sur mon Gitlab.

Si tu es pr√™t √† simplifier ta vie de sysadmin, reste avec moi et d√©couvrons ensemble comment d√©ployer GLPI et OCS en HTTPS avec Docker-compose.
Pr√©sentation du projet

On le sait tous, GLPI et OCS sont deux outils incontournables pour g√©rer notre parc informatique et suivre l‚Äôinventaire de notre mat√©riel.

Mais leur installation et configuration peuvent parfois √™tre un peu longues et fastidieuses, n‚Äôest-ce pas ? üòÖ

Eh bien, j‚Äôai une excellente nouvelle pour toi : avec ce projet Docker-compose, fini les prises de t√™te ! Tu vas pouvoir d√©ployer GLPI et OCS en un rien de temps, le tout s√©curis√© gr√¢ce au protocole HTTPS.
D√©ployer ton projet docker GLPI/OCS en 1 instant

Simple :

git clone https://gitlab.com/babidi34/docker-compose-ocs-glpi-mysql
cd docker-compose-ocs-glpi-mysql

    Si tu as un certificat et une cl√© ssl :
        place les dans le dossier ssl et renomme-les respectivement ssl.crt et ssl.key.
    Si tu n‚Äôas pas de certificat et cl√© SSL :
        tu n‚Äôas rien √† faire le script va g√©n√©rer un certificat auto-sign√© pour toi

Lance le script :

./setup.sh

En une ou 2 minutes le script aura d√©ployer tes services OCS et GLPI en HTTPS (ainsi qu‚Äôune base de donn√©es MySQL)
Utiliser ses propres certificats SSL

Si tu veux utiliser tes propres certificats SSL, voici comment faire :

    Assure-toi d‚Äôavoir tes fichiers ssl.crt et ssl.key pr√™ts. Ce sont les certificats SSL que tu souhaites utiliser pour s√©curiser tes conteneurs GLPI et OCS.
    Dans le dossier du projet, tu trouveras un sous-dossier nomm√© ssl/. Place tes fichiers ssl.crt et ssl.key dans ce dossier.
    Lance le script :

./setup.sh

Utilisation des services GLPI et OCS avec HTTPS

Une fois les conteneurs cr√©ent (g√©n√©ralement 2-3 minutes), les services GLPI et OCS sont disponibles

    GLPI: https://localhost/glpi
    OCS Inventory: https://localhost:8443/ocsreports

Les identifiants par d√©faut
GLPI :

    Username : glpi
    Password : glpi

OCS Inventory :

    Username : admin
    Password : admin

Comprendre comment fonctionne le projet
Le docker-compose :


version: '3.3'

services:
  mysql :
    image : mysql:8-debian
    container_name : mysql
    hostname: mysql
    restart: always
    expose :
      - "3306"
    environment:
      MYSQL_RANDOM_ROOT_PASSWORD: "true"
    volumes :
      - ./sql/:/docker-entrypoint-initdb.d/
      - sqldata:/var/lib/mysql
    networks:
      glpi_project:
  glpi:
    image: debian:11
    container_name: glpi
    hostname: glpi
    restart: always
    ports:
      - 443:443
    env_file:
      - secrets.env
    volumes:
      - ./ssl/ssl.key:/etc/ssl/glpi.key
      - ./ssl/ssl.crt:/etc/ssl/glpi.crt
      - ./front/vhost_glpi.conf:/etc/nginx/sites-available/glpi.conf
      - ./scripts/glpi-setup.sh:/usr/local/bin/glpi-setup.sh
      - glpidata:/var/www/html/glpi/
    networks:
      glpi_project:
    depends_on:
      - mysql
    command: /usr/local/bin/glpi-setup.sh
  ocs:
    image: ocsinventory/ocsinventory-docker-image:2.10
    container_name: ocs
    hostname: ocs
    restart: always
    ports:
      - 8443:443
    env_file:
      - secrets.env
    volumes:
      - ./ssl/ssl.key:/etc/ssl/private/ocs.key
      - ./ssl/ssl.crt:/etc/ssl/certs/ocs.crt
      - ./front/vhost_ocs.conf:/etc/nginx/sites-available/ocs.conf
      - ./scripts/ocs-setup.sh:/usr/local/bin/ocs-setup.sh
      - ./front/ocs_nginx.conf:/root/nginx.conf
      - perlcomdata:/etc/ocsinventory-server
      - extensionsdata:/usr/share/ocsinventory-reports/ocsreports/extensions
      - varlibdata:/var/lib/ocsinventory-reports
      - httpdconfdata:/etc/httpd/conf.d
    networks:
      glpi_project:
    depends_on:
      - mysql
    command: /usr/local/bin/ocs-setup.sh

 
networks:
  glpi_project:

volumes:
  sqldata:
  glpidata:
  perlcomdata:
  extensionsdata:
  varlibdata:
  httpdconfdata:

Version :

La version de Docker Compose utilis√©e est ‚Äò3.3‚Äô.
Services :

Le fichier d√©crit trois services : mysql, glpi et ocs.
mysql :

Ce service utilise l‚Äôimage mysql:8-debian pour d√©ployer un conteneur MySQL. Il expose le port 3306 et stocke les donn√©es dans un volume nomm√© sqldata. Le conteneur utilise le r√©seau glpi_project.
GLPI :

Ce service utilise l‚Äôimage debian:11 pour d√©ployer un conteneur GLPI. Il redirige le port 443 vers le port 443 du conteneur. Le conteneur utilise le r√©seau glpi_project et d√©pend du service mysql. Les certificats SSL, les configurations et les scripts n√©cessaires sont mont√©s dans les volumes appropri√©s. Les donn√©es GLPI sont stock√©es dans le volume glpidata.
OCS :

Ce service utilise l‚Äôimage ocsinventory/ocsinventory-docker-image:2.10 pour d√©ployer un conteneur OCS Inventory. Il redirige le port 8443 vers le port 443 du conteneur. Le conteneur utilise le r√©seau glpi_project et d√©pend du service mysql. Les certificats SSL, les configurations et les scripts n√©cessaires sont mont√©s dans les volumes appropri√©s. Les donn√©es OCS sont stock√©es dans les volumes perlcomdata, extensionsdata, varlibdata et httpdconfdata.
R√©seau :

Un seul r√©seau est d√©fini : glpi_project. Tous les services (mysql, glpi et ocs) sont connect√©s √† ce r√©seau.
Volumes :

Plusieurs volumes sont d√©finis pour stocker les donn√©es et les configurations :
sqldata :

Stocke les donn√©es de la base de donn√©es MySQL.
glpidata :

Stocke les donn√©es de GLPI.
perlcomdata, extensionsdata, varlibdata et httpdconfdata :

Stockent les donn√©es et les configurations d‚ÄôOCS Inventory.
Dossier front :

Le dossier front contient les fichiers de configurations des serveurs web utilis√© dans les conteneurs docker ocs et glpi.
Dossier sql :

Contient les fichiers SQL pour initialiser les bases de donn√©es de GLPI et OCS dans le conteneur docker mysql.
Dossier scripts :

Ce dossier contient les scripts glpi-setup.sh et ocs-setup.sh utilis√© lors de la cr√©ation de OCS et GLPI pour les configurer.
glpi-setup.sh :

Voici une explication rapide des diff√©rentes √©tapes du script :

    Le script v√©rifie si le fichier de configuration de la base de donn√©es GLPI (/var/www/html/glpi/config/config_db.php) existe d√©j√†. Si ce n‚Äôest pas le cas, cela signifie que GLPI n‚Äôest pas encore install√© et configur√© et le script continue √† ex√©cuter les √©tapes suivantes.
    Le script met √† jour les paquets et installe les paquets n√©cessaires pour le serveur web Nginx et PHP.
    Il t√©l√©charge la version 9.5.7 de GLPI depuis GitHub, l‚Äôextrait dans /var/www/html/ et change le propri√©taire des fichiers GLPI pour l‚Äôutilisateur www-data (utilis√© par nginx).
    Le script cr√©e un lien symbolique pour activer la configuration Nginx de GLPI et supprime la configuration par d√©faut de Nginx. Il ajoute √©galement la directive daemon off; √† la configuration de Nginx pour emp√™cher le processus Nginx de devenir un d√©mon.
    Le script installe GLPI en utilisant l‚Äôoutil de console. Il sp√©cifie les informations de connexion √† la base de donn√©es (h√¥te, utilisateur, mot de passe et nom de la base de donn√©es) et la langue par d√©faut. L‚Äôoption --no-interaction permet d‚Äôinstaller GLPI sans interaction utilisateur.
    Enfin, le script d√©marre le service PHP-FPM et lance le serveur Nginx.

En r√©sum√©, ce script installe et configure GLPI sur un serveur Debian avec Nginx si ce n‚Äôest pas d√©j√† fait, et d√©marre ensuite les services PHP-FPM et Nginx pour servir l‚Äôapplication GLPI.

On l‚Äôutilise pour notre conteneur GLPI mais il peut aussi √™tre utilis√© sur un serveur Debian 11.
ocs-setup.sh :

Il est utilis√© pour configurer OCS Inventory avec Nginx comme proxy inverse.

Voici une explication rapide des diff√©rentes √©tapes du script :

    Le script v√©rifie si le fichier de configuration d‚ÄôOCS Inventory pour Nginx (/etc/nginx/sites-enabled/ocs.conf) existe d√©j√†. Si ce n‚Äôest pas le cas alors √ßa signifie qu‚ÄôOCS Inventory n‚Äôest pas encore configur√© et le script continue √† ex√©cuter les √©tapes suivantes.
    Le script installe le paquet iproute2 (j‚Äôai oubli√© de le retirer, √† la base c‚Äô√©tait pour faire du debug üòÖ) et t√©l√©charge le paquet Nginx pour Ubuntu.
    Il t√©l√©charge et installe le paquet Nginx.
    Le script copie un fichier de configuration Nginx sp√©cifique pour OCS Inventory (/root/nginx.conf) dans le r√©pertoire de configuration de Nginx (/etc/nginx/nginx.conf). Il supprime √©galement le fichier de configuration par d√©faut de Nginx.
    Il cr√©e les r√©pertoires /etc/nginx/auth et /etc/nginx/sites-enabled, puis cr√©e un lien symbolique pour activer la configuration Nginx d‚ÄôOCS Inventory.
    Le script cr√©e un fichier de mot de passe pour l‚Äôauthentification HTTP basique avec les informations d‚Äôidentification ocsapi et un mot de passe chiffr√©.
    Enfin, le script d√©marre le serveur Apache (apachectl start) et lance le serveur Nginx.

Le script configure OCS Inventory avec Nginx comme proxy inverse, si ce n‚Äôest pas d√©j√† fait et d√©marre ensuite les services Apache et Nginx pour servir l‚Äôapplication OCS Inventory.
Le fichier secrets.env :

Le fichier contient les user et mot de passe des base de donn√©es des services, tu peux les modifier si besoin.
Le fichier setup.sh

C‚Äôest le fichier qui lances pour toi le docker-compose avec tous ce qu‚Äôil faut.

#!/bin/bash


source secrets.env

sql_final_file="sql/initdb.sql"

# Lisez le fichier SQL d'origine et remplacez les variables par les valeurs d√©finies
sed -e "s|\${glpi_database_name}|${glpi_database_name}|g" \
    -e "s|\${glpi_database_user}|${glpi_database_user}|g" \
    -e "s|\${glpi_database_password}|${glpi_database_password}|g" \
    -e "s|\${OCS_DB_NAME}|${OCS_DB_NAME}|g" \
    -e "s|\${OCS_DB_USER}|${OCS_DB_USER}|g" \
    -e "s|\${OCS_DB_PASS}|${OCS_DB_PASS}|g" \
    sql/initdb.sql.template > "$sql_final_file"

if [ ! -f ssl/ssl.crt ] || [ ! -f ssl/ssl.key ]; then
    echo "Les fichiers ssl.crt et ssl.key sont manquants dans le dossier ssl/. G√©n√©ration d'un certificat auto-sign√©..."
    mkdir -p ssl
    openssl req -x509 -nodes -days 3650 -newkey rsa:4096 -keyout ssl/ssl.key -out ssl/ssl.crt -subj "/C=FR/ST=France/L=Paris/O=entreprise/CN=localhost" 
fi

docker-compose build && docker-compose up -d

    Le script commence par charger les variables d‚Äôenvironnement depuis le fichier secrets.env.
    Ensuite, le script lit le fichier SQL mod√®le (sql/initdb.sql.template) et remplace les variables par les valeurs d√©finies dans secrets.env. Le fichier final est enregistr√© sous sql/initdb.sql.
    Le script v√©rifie si les fichiers de certificat SSL (ssl/ssl.crt) et de cl√© SSL (ssl/ssl.key) existent dans le dossier ssl/. Si ces fichiers n‚Äôexistent pas, le script g√©n√®re un certificat SSL auto-sign√© avec la commande openssl.
    Enfin, le script construit et d√©marre les services d√©finis dans le fichier docker-compose.yml en utilisant la commande docker-compose build && docker-compose up -d.

En gros ce script pr√©pare les fichiers de configuration n√©cessaires, g√©n√®re un certificat SSL auto-sign√© si n√©cessaire et d√©ploie les services GLPI et OCS Inventory √† l‚Äôaide de Docker Compose.
Conclusion

Dans cet article, nous avons vu comment d√©ployer GLPI et OCS en HTTPS avec Docker-compose.

Nous avons ajout√© le support HTTPS pour s√©curiser les communications entre les clients et les serveurs GLPI et OCS et avons automatis√© le processus de d√©ploiement avec un script.

Ce projet facilite grandement l‚Äôinstallation et la configuration de ces deux outils indispensables pour g√©rer ton parc informatique et suivre l‚Äôinventaire de ton mat√©riel.

Je t‚Äôencourage vivement √† essayer ce projet mis √† jour et √† partager tes commentaires et tes suggestions pour l‚Äôam√©liorer encore davantage.
Besoin d‚Äôaide ?

Si jamais tu te retrouves coinc√©(e) en sauvegardant ou en restaurant ton site WordPress, n‚Äôh√©site pas √† me joindre pour un coup de main ==> page de contact.

Je suis l√† pour toi si tu as des questions ou des soucis avec ton serveur ou tes scripts en g√©n√©ral.

Je mets √† profit mon savoir-faire pour t‚Äô√©pauler dans la prise en charge de ton site et de ton infrastructure.

Le bouche-√†-oreille est notre meilleur ami, merci de partager autour de toi ü´Ä
Partager :

    TwitterFacebookLinkedInPinterest1

Tags: automatisation, docker, docker-compose, infra as code
Read more articles
Article pr√©c√©dentDocker ‚Äì La base
Article suivantLogstash, installation, input et output
Vous devriez √©galement aimer
D√©ployer un projet Django sur un serveur Centos7/8 Apache	
D√©ployer un projet Django sur un serveur Centos7/8 Apache
24 janvier 2021
Gitlab vers Github ‚Äì Importer ses projets Gitlab dans Github	
Gitlab vers Github ‚Äì Importer ses projets Gitlab dans Github
2 octobre 2022
Plex Docker	
Plex Docker
21 f√©vrier 2023
Laisser un commentaire
Comment
Enter your name or username to comment
Enter your email address to comment
Enter your website URL (optional)

